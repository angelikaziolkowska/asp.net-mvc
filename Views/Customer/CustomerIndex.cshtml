@model Mvc4_Development_Test.Customer.CustomerDTO
@using Mvc4_Development_Test.Customer
@using PagedList.Mvc;
@using PagedList;

@{
        ViewBag.Title = "Customer";
        //foreach (var item in Model)
        //{
        ViewBag.RequiredLevel = new SelectList(Model.StatusList, "Status_ID", "Status_Name");
        ViewBag.Statuses = new SelectList(Model.StatusList.Where(s => !s.Status_ID.Equals(Status.Deleted)), "Status_ID", "Status_Name");
        SelectList titlesDDL = new SelectList(Model.TitleList, "Title_ID", "Title_Desc");
    @*}*@

    //this.ViewBag.Page = Model.Page;
    //ViewBag.MaxPage = (Model.CustomerList.Count() / 10) - (Model.CustomerList.Count() % 10 == 0 ? 1 : 0);
}

<hgroup class="title">
    <h1>@ViewBag.Title</h1>
</hgroup>

@using (Html.BeginForm("CustomerIndex", "Customer", FormMethod.Get, new { id = "customerindexsearchform" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div>
        @Html.ActionLink("Create Customer Member", "CreateCustomerMember")


        <p>
            Name: @Html.TextBox("SearchName")
        </p>
        <p>
            @Html.DropDownList("SearchStatus", (SelectList)ViewBag.Statuses, "Select Status", new { @class = "form-control" })
            <input type="submit" value="Search" class="btn btn-primary" />
        </p>
    </div>
}


@using (Html.BeginForm("CustomerIndex", "Customer", FormMethod.Post, new { id = "customerindexform" }))
{
    
    <table>
        @*@foreach (var item in Model)
        {*@
            <tr>
                <th>@Html.DisplayNameFor(m => Model.CustomerList.FirstOrDefault().Customer_ID)</th>
                <th>@Html.DisplayNameFor(m => Model.CustomerList.FirstOrDefault().Title_Desc)</th>
                <th>@Html.DisplayNameFor(m => Model.CustomerList.FirstOrDefault().Customer_Name)</th>
                <th>@Html.DisplayNameFor(m => Model.CustomerList.FirstOrDefault().Customer_School)</th>
                <th>@Html.DisplayNameFor(m => Model.CustomerList.FirstOrDefault().Customer_Email)</th>
                <th>@Html.DisplayNameFor(m => Model.CustomerList.FirstOrDefault().CustomerServiceList)</th>
                <th>@Html.DisplayNameFor(m => Model.CustomerList.FirstOrDefault().Status_ID)</th>
                <th>@Html.DisplayNameFor(m => Model.CustomerList.FirstOrDefault().Staff_ID)</th>
                <th>@Html.DisplayNameFor(m => Model.CustomerList.FirstOrDefault().Customer_EditDateT)</th>
                <th>Actions</th>
            </tr>

            @* Display a table of users *@

            @for (int i = 0; i < Model.CustomerList.Count(); i++)
            {
                if (ViewBag.Page != ViewBag.MaxPage && i >= 10)
                {
                    break;
                }

                if (Model.CustomerList[i].Status_ID == Status.Active || Model.CustomerList[i].Status_ID == Status.Blocked)
                {
                    @Html.HiddenFor(m => Model.CustomerList[i].Customer_ID)
                    <tr>

                        <td>@Model.CustomerList[i].Customer_ID</td>

                        <td>


                            <div class="editor-label">
                                @Html.LabelFor(model => Model.CustomerList[i].Title_ID)
                            </div>

                            <div class="editor-field">
                                @Html.DropDownListFor(model => Model.CustomerList[i].Title_ID, new SelectList(Model.TitleList, "Title_ID", "Title_Desc", Model.CustomerList[i].Title_ID), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => Model.CustomerList[i].Title_ID)
                            </div>
                        </td>
                        <td>
                            <div class="editor-label">
                                @Html.LabelFor(model => Model.CustomerList[i].Customer_Name, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="editor-field">
                                @Html.EditorFor(m => Model.CustomerList[i].Customer_Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(m => Model.CustomerList[i].Customer_Name)
                            </div>
                        </td>
                        <td>
                            <div class="editor-label">
                                @Html.LabelFor(model => Model.CustomerList[i].Customer_School, htmlAttributes: new { @class = "control-label col-md-2" })
                            </div>
                            <div class="editor-field">
                                @Html.EditorFor(m => Model.CustomerList[i].Customer_School, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(m => Model.CustomerList[i].Customer_School)
                                @Html.HiddenFor(m => Model.CustomerList[i].Customer_Email)
                                @*@Html.HiddenFor(m => item.Page)*@
                            </div>
                        </td>
                        <td>@Model.CustomerList[i].Customer_Email</td>
                        <td>
                            <ul>
                                @for (int j = 0; j < Model.CustomerServiceList.Count(); j++)
                                {
                                    if (Model.CustomerList[i].Customer_ID == Model.CustomerServiceList[j].Customer_ID)
                                    {
                                        <li>
                                            @Enum.GetName(typeof(Service), Model.CustomerServiceList[j].Service_ID)
                                        </li>
                                    }
                                }
                            </ul>
                        </td>
                        <td>@Model.CustomerList[i].Status_Name <br /></td>
                        <td>
                            @for (int j = 0; j < Model.StaffList.Count(); j++)
                            {
                                if (Model.CustomerList[i].Staff_ID == Model.StaffList[j].Staff_ID)
                                {
                                    @Model.StaffList[j].Staff_Name
                                }
                            }
                        </td>
                        <td>
                            @Model.CustomerList[i].Customer_EditDateT <br />
                        </td>
                        <td>
                            @if (Model.CustomerList[i].Status_ID == Status.Active)
                            {
                                @Html.ActionLink("Block", "EditStatus", Model.CustomerList[i])
                            }
                            else
                            {
                                @Html.ActionLink("Activate", "EditStatus", Model.CustomerList[i])
                            }
                            @Html.ActionLink("Delete", "Delete", Model.CustomerList[i]) <br />
                            @*@Html.ActionLink("Edit", "EditDetails", "Customer", new { id = Model.CustomerList[i].Customer_ID }, null)*@
                        </td>
                    </tr>
                }

            }

        @*}*@
    </table>
        
        <br />
        <div id='Paging' style="text-align: center">
            Page @(Model.CustomerList.PageCount < Model.CustomerList.PageNumber ? 1 : Model.CustomerList.PageNumber)
            of @Model.CustomerList.PageCount

            @Html.PagedListPager(Model.CustomerList, page => Url.Action("CustomerIndex", new { page }))
        </div>

        <p>
            @Html.Hidden("page" , Model.CustomerList.PageNumber)
            <input type="submit" value="Save" class="btn btn-default" />
        </p>       
}

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}
